'use strict'

Object.defineProperty(exports, '__esModule', {
  value: true
})
exports.processRequest = processRequest
exports.apolloUploadKoa = apolloUploadKoa
exports.apolloUploadExpress = apolloUploadExpress

var _mkdirp = _interopRequireDefault(require('mkdirp'))

var _formidable = _interopRequireDefault(require('formidable'))

var _objectPath = _interopRequireDefault(require('object-path'))

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj }
}

function processRequest(request, { uploadDir } = {}) {
  if (uploadDir) _mkdirp.default.sync(uploadDir)

  const form = _formidable.default.IncomingForm({
    uploadDir
  })

  return new Promise((resolve, reject) => {
    form.parse(request, (error, { operations }, files) => {
      if (error) reject(new Error(error))
      operations = JSON.parse(operations)

      if (Object.keys(files).length) {
        const operationsPath = (0, _objectPath.default)(operations)
        Object.keys(files).forEach(variablesPath => {
          const { name, type, size, path } = files[variablesPath]
          operationsPath.set(variablesPath, {
            name,
            type,
            size,
            path
          })
        })
      }

      resolve(operations)
    })
  })
}

function apolloUploadKoa(options) {
  return async (ctx, next) => {
    if (ctx.request.is('multipart/form-data'))
      ctx.request.body = await processRequest(ctx.req, options)
    await next()
  }
}

function apolloUploadExpress(options) {
  return (request, response, next) => {
    if (!request.is('multipart/form-data')) return next()
    processRequest(request, options)
      .then(body => {
        request.body = body
        next()
      })
      .catch(next)
  }
}
